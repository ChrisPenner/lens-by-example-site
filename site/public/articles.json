[{"what":"Learn to write and compose traversals","slug":"writing-traversals","url":"/articles/traversals/writing-traversals","content":"<h1 id=\"writing-traversals\">Writing Traversals</h1>\n<p>Traversals are one of the most adaptable and useful parts of lenses. In short they let you:</p>\n<ul>\n<li>Access and change deeply nested parts of state</li>\n<li>Access multiple parts of a structure at once</li>\n<li>'Focus' on each of multiple elements 'pretending' you're only working with one element at a time</li>\n</ul>\n<p>How do Traversals fit into the lens hierarchy? In short:</p>\n<ul>\n<li>All <code>Lens</code>es are usable as <code>Traversal</code>s over a single element</li>\n<li>A <code>Traversal</code> can be treated as a <code>Prism</code>s by focusing on the first element of the traversal</li>\n<li>All traversals are also <code>Folds</code></li>\n<li>Most traversals are <code>Indexable</code> and can contain location info. E.g. index in their list, key of a <code>Map</code></li>\n</ul>\n<h2 id=\"how\">How</h2>\n<p>Most lens tutorials show you how to use and compose traversals, but most skim over how to WRITE complex traversals.</p>\n<h2 id=\"simple-traversals\">Simple Traversals</h2>\n<p>We'll start of with our imports and extensions:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb1-1\" title=\"1\"><span class=\"kw\">module</span> <span class=\"dt\">Examples.Traversals.Writing</span> <span class=\"kw\">where</span></a>\n<a class=\"sourceLine\" id=\"cb1-2\" title=\"2\"></a>\n<a class=\"sourceLine\" id=\"cb1-3\" title=\"3\"><span class=\"kw\">import</span>           <span class=\"dt\">Control.Lens</span></a>\n<a class=\"sourceLine\" id=\"cb1-4\" title=\"4\"><span class=\"kw\">import</span> <span class=\"kw\">qualified</span> <span class=\"dt\">Data.Map</span>                      <span class=\"kw\">as</span> <span class=\"dt\">M</span></a></code></pre></div>\n<p>Let's start with the simplest possible traversal! In fact this is the type you'll probably use the most often. Let's say we work at a bank and we have a type which represents a simple bank transaction:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb2-1\" title=\"1\"><span class=\"kw\">data</span> <span class=\"dt\">Transaction</span> <span class=\"fu\">=</span> <span class=\"dt\">Withdrawal</span> {<span class=\"ot\">amount ::</span> <span class=\"dt\">Int</span>} <span class=\"fu\">|</span> <span class=\"dt\">Deposit</span> {<span class=\"ot\">amount ::</span> <span class=\"dt\">Int</span> }</a>\n<a class=\"sourceLine\" id=\"cb2-2\" title=\"2\">  <span class=\"kw\">deriving</span> <span class=\"dt\">Show</span></a></code></pre></div>\n<p>We have two constructors, one for withdrawals, one for deposits. Each have the <code>amount</code> accessor which gets the amount of the transaction within <strong>either</strong> of the constructors.</p>\n<p>Great! Let's write our first simple traversal! Let's say we have a list of Transactions and we want to focus on each element of that list using a traversal. Any time we're writing a traversal over a data type which implements <code>Traversable</code> over the focus we want then we can actually use the traversable instance to write our traversal for us! Here's what it looks like:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb3-1\" title=\"1\"><span class=\"ot\">simpleTransactions ::</span> <span class=\"dt\">Traversal&#39;</span> [<span class=\"dt\">Transaction</span>] <span class=\"dt\">Transaction</span></a>\n<a class=\"sourceLine\" id=\"cb3-2\" title=\"2\">simpleTransactions <span class=\"fu\">=</span> <span class=\"fu\">traverse</span></a></code></pre></div>\n<p>What?? Yup it's that simple! turns out that the signature of a traversal is <strong>identical</strong> to that of the actual <code>traverse</code> function! Any time something is traversable we can just use <code>traverse</code>; and in fact there's no reason to define this traversal ourselves unless we want an alias for clarity. In this case we've actually defined a <strong>worse</strong> traversal than just using <code>traverse</code> directly, can you see why? Let's learn how to read the type signatures of Traversals!</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb4-1\" title=\"1\"><span class=\"dt\">Traversal&#39;</span> s a</a>\n<a class=\"sourceLine\" id=\"cb4-2\" title=\"2\"><span class=\"co\">-- a.k.a.</span></a>\n<a class=\"sourceLine\" id=\"cb4-3\" title=\"3\"><span class=\"dt\">Traversal&#39;</span> structure focus</a></code></pre></div>\n<p>The lens library has a convention where a suffix of <code>'</code> means to use a 'simple' form of the provided type. For traversals this means that anything with a type of <code>Traversal' s a</code> is <strong>NOT</strong> allowed to change the type of the structure or focused value. In our example this means that when using the <code>simpleTransactions</code> traversal we <strong>can't change Transaction into some other type</strong>. If we try we'll see an error:</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb5-1\" title=\"1\"><span class=\"ot\">someTransactions ::</span> [<span class=\"dt\">Transaction</span>]</a>\n<a class=\"sourceLine\" id=\"cb5-2\" title=\"2\">someTransactions <span class=\"fu\">=</span> [<span class=\"dt\">Deposit</span> <span class=\"dv\">100</span>, <span class=\"dt\">Withdrawal</span> <span class=\"dv\">50</span>]</a>\n<a class=\"sourceLine\" id=\"cb5-3\" title=\"3\"></a>\n<a class=\"sourceLine\" id=\"cb5-4\" title=\"4\">λ<span class=\"fu\">&gt;</span> someTransactions <span class=\"fu\">&amp;</span> simpleTransactions <span class=\"fu\">.~</span> <span class=\"st\">&quot;a string&quot;</span></a>\n<a class=\"sourceLine\" id=\"cb5-5\" title=\"5\"></a>\n<a class=\"sourceLine\" id=\"cb5-6\" title=\"6\"><span class=\"fu\">error:</span></a>\n<a class=\"sourceLine\" id=\"cb5-7\" title=\"7\">    • <span class=\"dt\">Couldn&#39;t</span> match expected <span class=\"kw\">type</span> ‘<span class=\"dt\">Transaction</span>’</a>\n<a class=\"sourceLine\" id=\"cb5-8\" title=\"8\">                  with actual <span class=\"kw\">type</span> ‘[<span class=\"dt\">Char</span>]’</a>\n<a class=\"sourceLine\" id=\"cb5-9\" title=\"9\">    • <span class=\"dt\">In</span> the second argument <span class=\"kw\">of</span> ‘(<span class=\"fu\">.~</span>)’, namely ‘<span class=\"st\">&quot;a string&quot;</span>’</a>\n<a class=\"sourceLine\" id=\"cb5-10\" title=\"10\">      <span class=\"dt\">In</span> the second argument <span class=\"kw\">of</span> ‘(<span class=\"fu\">&amp;</span>)’, namely</a>\n<a class=\"sourceLine\" id=\"cb5-11\" title=\"11\">        ‘simpleTransactions <span class=\"fu\">.~</span> <span class=\"st\">&quot;a string&quot;</span>’</a>\n<a class=\"sourceLine\" id=\"cb5-12\" title=\"12\">      <span class=\"dt\">In</span> the expression<span class=\"fu\">:</span></a>\n<a class=\"sourceLine\" id=\"cb5-13\" title=\"13\">        someTransactions <span class=\"fu\">&amp;</span> simpleTransactions <span class=\"fu\">.~</span> <span class=\"st\">&quot;a string&quot;</span></a></code></pre></div>\n<p>Let's fix this by relaxing our type signature to allow the traversal to change the type of the focus.</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb6-1\" title=\"1\"><span class=\"ot\">typeChangingTransactions ::</span> <span class=\"dt\">Traversal</span> [<span class=\"dt\">Transaction</span>] [result] <span class=\"dt\">Transaction</span> result</a>\n<a class=\"sourceLine\" id=\"cb6-2\" title=\"2\">typeChangingTransactions <span class=\"fu\">=</span> <span class=\"fu\">traverse</span></a></code></pre></div>\n<p>Now we're using the non-simplified type <code>Traversal s t a b</code>; as usual the <code>stab</code> types mean:</p>\n<ul>\n<li><code>s</code>: Starting structure</li>\n<li><code>t</code>: Ending structure</li>\n<li><code>a</code>: Starting focus</li>\n<li><code>b</code>: Ending focus</li>\n</ul>\n<p>Now that we've relaxed the type signature we can use it to change the type of our transactions if we like:</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb7-1\" title=\"1\">λ<span class=\"fu\">&gt;</span> someTransactions <span class=\"fu\">&amp;</span> typeChangingTransactions <span class=\"fu\">.~</span> <span class=\"st\">&quot;a string&quot;</span></a>\n<a class=\"sourceLine\" id=\"cb7-2\" title=\"2\">[<span class=\"st\">&quot;a string&quot;</span>,<span class=\"st\">&quot;a string&quot;</span>]</a></code></pre></div>\n<p>In practice you probably shouldn't bother writing these types of traversals yourself, just use provided <code>traversed</code> traversal which depends on the <code>Traversal</code> instance and also passes indexing information if you end up wanting it.</p>\n<h2 id=\"selective-traversals\">Selective Traversals</h2>\n<p>The default traversal works great if you want to select every element of a traversable structure, but what if we only want to select withdrawal transactions? Time to write our own custom traversal!</p>\n<p>Remember how <code>traverse</code> is a valid traversal? That means we can write our own traversal by matching the type signature of <code>traverse</code> itself!</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb8-1\" title=\"1\"><span class=\"fu\">traverse</span><span class=\"ot\"> ::</span> (<span class=\"dt\">Traversable</span> t, <span class=\"dt\">Applicative</span> f) <span class=\"ot\">=&gt;</span> (a <span class=\"ot\">-&gt;</span> f b) <span class=\"ot\">-&gt;</span> t a <span class=\"ot\">-&gt;</span> f (t b)</a></code></pre></div>\n<p>Let's constrain the type so it matches what we want to do, in our case we want to focus on the amount of withdrawal transactions, so given a list of transactions we can access the <code>Int</code>s inside JUST the withdrawals.</p>\n<p>Using the shorthand notation that gives us:</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb9-1\" title=\"1\"><span class=\"ot\">withdrawals ::</span> <span class=\"dt\">Traversal&#39;</span> [<span class=\"dt\">Transaction</span>] <span class=\"dt\">Int</span></a>\n<a class=\"sourceLine\" id=\"cb9-2\" title=\"2\"><span class=\"co\">-- a.k.a.</span></a>\n<a class=\"sourceLine\" id=\"cb9-3\" title=\"3\"><span class=\"ot\">withdrawals ::</span> <span class=\"dt\">Traversal</span> [<span class=\"dt\">Transaction</span>] [<span class=\"dt\">Transaction</span>] <span class=\"dt\">Int</span> <span class=\"dt\">Int</span></a></code></pre></div>\n<p>Notice that this sort of operation does <strong>not</strong> allow us to change any of the types, so we use the <code>Traversal'</code> notation, but that doesn't help us write our actual function, so let's take a look at the signature of <code>traverse</code> specialized to <code>withdrawals</code>:</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb10-1\" title=\"1\"><span class=\"ot\">withdrawals ::</span> (<span class=\"dt\">Applicative</span> f) </a>\n<a class=\"sourceLine\" id=\"cb10-2\" title=\"2\">            <span class=\"ot\">=&gt;</span> (<span class=\"dt\">Int</span> <span class=\"ot\">-&gt;</span> f <span class=\"dt\">Int</span>) </a>\n<a class=\"sourceLine\" id=\"cb10-3\" title=\"3\">            <span class=\"ot\">-&gt;</span> [ <span class=\"dt\">Transaction</span> ] </a>\n<a class=\"sourceLine\" id=\"cb10-4\" title=\"4\">            <span class=\"ot\">-&gt;</span> f [ <span class=\"dt\">Transaction</span> ]</a></code></pre></div>\n<p>This means that our <code>withdrawals</code> traversal must take a function as an argument, that function <em>wraps</em> an <code>Int</code> into <strong>some</strong> Applicative structure, but we're <strong>NOT</strong> allowed to pick which Applicative! <code>withdrawals</code> needs to use that function to somehow wrap the whole list of <code>Transaction</code>s in the unknown applicative. This should look pretty familiar if you've ever implemented <code>Traversable</code> by hand, the difference is that here we're allowed to know a bit of extra info about the types we're traversing!</p>\n<p>Let's see if we can write something which at least type-checks with this signature:</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb11-1\" title=\"1\">allAmounts</a>\n<a class=\"sourceLine\" id=\"cb11-2\" title=\"2\"><span class=\"ot\">  ::</span> (<span class=\"dt\">Applicative</span> f) <span class=\"ot\">=&gt;</span> (<span class=\"dt\">Int</span> <span class=\"ot\">-&gt;</span> f <span class=\"dt\">Int</span>) <span class=\"ot\">-&gt;</span> [<span class=\"dt\">Transaction</span>] <span class=\"ot\">-&gt;</span> f [<span class=\"dt\">Transaction</span>]</a>\n<a class=\"sourceLine\" id=\"cb11-3\" title=\"3\">allAmounts f ts <span class=\"fu\">=</span> <span class=\"fu\">traverse</span> go ts</a>\n<a class=\"sourceLine\" id=\"cb11-4\" title=\"4\"> <span class=\"kw\">where</span></a>\n<a class=\"sourceLine\" id=\"cb11-5\" title=\"5\">  go (<span class=\"dt\">Withdrawal</span> amt) <span class=\"fu\">=</span> <span class=\"dt\">Withdrawal</span> <span class=\"fu\">&lt;$&gt;</span> f amt</a>\n<a class=\"sourceLine\" id=\"cb11-6\" title=\"6\">  go (<span class=\"dt\">Deposit</span>    amt) <span class=\"fu\">=</span> <span class=\"dt\">Deposit</span> <span class=\"fu\">&lt;$&gt;</span> f amt</a></code></pre></div>\n<p>Here we're relying on the generic <code>traverse</code> function for our list type, but we have to manually unpack and re-wrap each <code>Transaction</code> using <code>go</code> because it's not generically traversable over the contained amount. Inside <code>go</code> we have to rely on <code>&lt;$&gt;</code> (a.k.a. <code>fmap</code>) since we don't actually know which Applicative will be chosen when the traversal is eventually used.</p>\n<p>This type-checks, <em>BUT</em> it makes no discrimination between <code>Withdrawal</code>s and <code>Deposit</code>s! In fact the traversal we've written selects the <code>Int</code> amount of both withdrawals AND deposits. A quick way to debug your traversals is to simply fold the selected elements into a list using <code>(^..)</code>. Let's see how <code>allTransactions</code> behaves:</p>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb12-1\" title=\"1\"><span class=\"ot\">someTransactions ::</span> [<span class=\"dt\">Transaction</span>]</a>\n<a class=\"sourceLine\" id=\"cb12-2\" title=\"2\">someTransactions <span class=\"fu\">=</span> [<span class=\"dt\">Deposit</span> <span class=\"dv\">100</span>, <span class=\"dt\">Withdrawal</span> <span class=\"dv\">50</span>]</a>\n<a class=\"sourceLine\" id=\"cb12-3\" title=\"3\"></a>\n<a class=\"sourceLine\" id=\"cb12-4\" title=\"4\">λ<span class=\"fu\">&gt;</span> someTransactions <span class=\"fu\">^..</span> allAmounts</a>\n<a class=\"sourceLine\" id=\"cb12-5\" title=\"5\">[<span class=\"dv\">100</span>,<span class=\"dv\">50</span>]</a></code></pre></div>\n<p>So it's pretty clear we're focusing both deposits and withdrawals.</p>\n<p>We need to somehow tell the traversal which <code>Int</code>s we care about and which we don't! We do this by selecting the values we care about using the provided <code>f</code> and ignore the values we don't by lifting them with <code>pure</code>. You can think of it as though <code>f</code> <strong>marks</strong> focused values while <code>pure</code> ignores them. Let's alter our traversal accordingly!</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb13-1\" title=\"1\"><span class=\"co\">-- withdrawals :: Traversal&#39; [Transaction] Int</span></a>\n<a class=\"sourceLine\" id=\"cb13-2\" title=\"2\"><span class=\"co\">-- a.k.a.</span></a>\n<a class=\"sourceLine\" id=\"cb13-3\" title=\"3\">withdrawals</a>\n<a class=\"sourceLine\" id=\"cb13-4\" title=\"4\"><span class=\"ot\">  ::</span> (<span class=\"dt\">Applicative</span> f) <span class=\"ot\">=&gt;</span> (<span class=\"dt\">Int</span> <span class=\"ot\">-&gt;</span> f <span class=\"dt\">Int</span>) <span class=\"ot\">-&gt;</span> [<span class=\"dt\">Transaction</span>] <span class=\"ot\">-&gt;</span> f [<span class=\"dt\">Transaction</span>]</a>\n<a class=\"sourceLine\" id=\"cb13-5\" title=\"5\">withdrawals f ts <span class=\"fu\">=</span> <span class=\"fu\">traverse</span> go ts</a>\n<a class=\"sourceLine\" id=\"cb13-6\" title=\"6\"> <span class=\"kw\">where</span></a>\n<a class=\"sourceLine\" id=\"cb13-7\" title=\"7\">  go (<span class=\"dt\">Withdrawal</span> amt) <span class=\"fu\">=</span> <span class=\"dt\">Withdrawal</span> <span class=\"fu\">&lt;$&gt;</span> f amt</a>\n<a class=\"sourceLine\" id=\"cb13-8\" title=\"8\">  go (<span class=\"dt\">Deposit</span>    amt) <span class=\"fu\">=</span> <span class=\"dt\">Deposit</span> <span class=\"fu\">&lt;$&gt;</span> <span class=\"fu\">pure</span> amt</a></code></pre></div>\n<p>And let's test out our new traversal, we'll check the focus with <code>^..</code> then try adding <code>$10</code> to all of our withdrawals using <code>+~</code> which adds an amount to numbers selected by a lens or traversal.</p>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb14-1\" title=\"1\">λ<span class=\"fu\">&gt;</span> someTransactions <span class=\"fu\">^..</span> withdrawals</a>\n<a class=\"sourceLine\" id=\"cb14-2\" title=\"2\">[<span class=\"dv\">50</span>]</a>\n<a class=\"sourceLine\" id=\"cb14-3\" title=\"3\"></a>\n<a class=\"sourceLine\" id=\"cb14-4\" title=\"4\">λ<span class=\"fu\">&gt;</span> someTransactions <span class=\"fu\">&amp;</span> withdrawals <span class=\"fu\">+~</span> <span class=\"dv\">10</span></a>\n<a class=\"sourceLine\" id=\"cb14-5\" title=\"5\">[<span class=\"dt\">Deposit</span> {amount <span class=\"fu\">=</span> <span class=\"dv\">100</span>},<span class=\"dt\">Withdrawal</span> {amount <span class=\"fu\">=</span> <span class=\"dv\">60</span>}]</a></code></pre></div>\n<p>Looks great!</p>\n<p>One last example as a word of warning, it's tempting to write our <code>withdrawal</code> traversal by <code>filter</code>ing our list down to the values we care about and traversing over those, but don't fall into this trap! If we filter out values from the list they'll be forgotten when we modify values using the traversal!</p>\n<p>Here's an example of what NOT to do:</p>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb15-1\" title=\"1\"><span class=\"ot\">badWithdrawals ::</span> <span class=\"dt\">Traversal&#39;</span> [<span class=\"dt\">Transaction</span>] <span class=\"dt\">Int</span></a>\n<a class=\"sourceLine\" id=\"cb15-2\" title=\"2\">badWithdrawals f ts <span class=\"fu\">=</span> <span class=\"fu\">traverse</span> go (<span class=\"fu\">filter</span> isWithdrawal ts)</a>\n<a class=\"sourceLine\" id=\"cb15-3\" title=\"3\"> <span class=\"kw\">where</span></a>\n<a class=\"sourceLine\" id=\"cb15-4\" title=\"4\">  isWithdrawal <span class=\"dt\">Withdrawal</span>{} <span class=\"fu\">=</span> <span class=\"dt\">True</span></a>\n<a class=\"sourceLine\" id=\"cb15-5\" title=\"5\">  isWithdrawal _            <span class=\"fu\">=</span> <span class=\"dt\">False</span></a>\n<a class=\"sourceLine\" id=\"cb15-6\" title=\"6\">  go t <span class=\"fu\">=</span> <span class=\"dt\">Withdrawal</span> <span class=\"fu\">&lt;$&gt;</span> f (amount t)</a></code></pre></div>\n<p>Notice how we lose the deposit entirely when we try to edit our withdrawals!</p>\n<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb16-1\" title=\"1\">λ<span class=\"fu\">&gt;</span> someTransactions <span class=\"fu\">&amp;</span> badWithdrawals <span class=\"fu\">+~</span> <span class=\"dv\">10</span></a>\n<a class=\"sourceLine\" id=\"cb16-2\" title=\"2\">[<span class=\"dt\">Withdrawal</span> {amount <span class=\"fu\">=</span> <span class=\"dv\">60</span>}]</a></code></pre></div>\n<h2 id=\"traversals-over-embedded-structures\">Traversals over embedded structures</h2>\n<p>So far we know how to write traversals for types which are already traversable, but what if the focus we want is embedded deeper within a newtype or record? Let's expand our example to handle transactions embedded within a bank account data-type!</p>\n<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb17-1\" title=\"1\"><span class=\"kw\">data</span> <span class=\"dt\">AccountType</span> <span class=\"fu\">=</span> <span class=\"dt\">Chequing</span> <span class=\"fu\">|</span> <span class=\"dt\">Savings</span></a>\n<a class=\"sourceLine\" id=\"cb17-2\" title=\"2\">  <span class=\"kw\">deriving</span> <span class=\"dt\">Show</span></a>\n<a class=\"sourceLine\" id=\"cb17-3\" title=\"3\"></a>\n<a class=\"sourceLine\" id=\"cb17-4\" title=\"4\"><span class=\"kw\">data</span> <span class=\"dt\">BankAccount</span> <span class=\"fu\">=</span></a>\n<a class=\"sourceLine\" id=\"cb17-5\" title=\"5\">  <span class=\"dt\">BankAccount</span></a>\n<a class=\"sourceLine\" id=\"cb17-6\" title=\"6\">    {<span class=\"ot\"> accountType ::</span> <span class=\"dt\">AccountType</span></a>\n<a class=\"sourceLine\" id=\"cb17-7\" title=\"7\">    ,<span class=\"ot\"> transactions ::</span> [<span class=\"dt\">Transaction</span>]</a>\n<a class=\"sourceLine\" id=\"cb17-8\" title=\"8\">    } <span class=\"kw\">deriving</span> <span class=\"dt\">Show</span></a></code></pre></div>\n<p>For a non-trivial example we'll show how to write a new traversal which uses our existing <code>withdrawals</code> traversal to access the withdrawals nested within a <code>BankAccount</code>!</p>\n<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb18-1\" title=\"1\"><span class=\"co\">-- accountWithdrawals :: Traversal&#39; BankAccount Int</span></a>\n<a class=\"sourceLine\" id=\"cb18-2\" title=\"2\"><span class=\"co\">-- a.k.a.</span></a>\n<a class=\"sourceLine\" id=\"cb18-3\" title=\"3\">accountWithdrawals</a>\n<a class=\"sourceLine\" id=\"cb18-4\" title=\"4\"><span class=\"ot\">  ::</span> (<span class=\"dt\">Applicative</span> f) <span class=\"ot\">=&gt;</span> (<span class=\"dt\">Int</span> <span class=\"ot\">-&gt;</span> f <span class=\"dt\">Int</span>) <span class=\"ot\">-&gt;</span> <span class=\"dt\">BankAccount</span> <span class=\"ot\">-&gt;</span> f <span class=\"dt\">BankAccount</span></a>\n<a class=\"sourceLine\" id=\"cb18-5\" title=\"5\">accountWithdrawals f (<span class=\"dt\">BankAccount</span> type&#39; transactions&#39;) <span class=\"fu\">=</span></a>\n<a class=\"sourceLine\" id=\"cb18-6\" title=\"6\">  <span class=\"dt\">BankAccount</span> type&#39; <span class=\"fu\">&lt;$&gt;</span> withdrawals f transactions&#39;</a></code></pre></div>\n<p>Here we simply reconstruct the unaffected parts of <code>BankAccount</code> as normal, when we get to our transactions we need to wrap them in the given applicative and <strong>focus</strong> the appropriate elements using the provided <code>f</code> function. We can rely on the fact that traversals behave just like the regular ol' <code>traverse</code> function! We'll run <code>withdrawals</code> over the list as though it were <code>traverse</code>, passing it <code>f</code> as the function to select values within the structure. Pretty nifty stuff! Now we have a traversal which can access withdrawals from within a bank account!</p>\n<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb19-1\" title=\"1\"><span class=\"ot\">account ::</span> <span class=\"dt\">BankAccount</span></a>\n<a class=\"sourceLine\" id=\"cb19-2\" title=\"2\">account <span class=\"fu\">=</span> <span class=\"dt\">BankAccount</span> <span class=\"dt\">Savings</span> [<span class=\"dt\">Deposit</span> <span class=\"dv\">100</span>, <span class=\"dt\">Withdrawal</span> <span class=\"dv\">50</span>]</a>\n<a class=\"sourceLine\" id=\"cb19-3\" title=\"3\"></a>\n<a class=\"sourceLine\" id=\"cb19-4\" title=\"4\">λ<span class=\"fu\">&gt;</span> account <span class=\"fu\">^..</span> accountWithdrawals</a>\n<a class=\"sourceLine\" id=\"cb19-5\" title=\"5\">[<span class=\"dv\">50</span>]</a>\n<a class=\"sourceLine\" id=\"cb19-6\" title=\"6\"></a>\n<a class=\"sourceLine\" id=\"cb19-7\" title=\"7\">λ<span class=\"fu\">&gt;</span> account <span class=\"fu\">&amp;</span> accountWithdrawals <span class=\"fu\">+~</span> <span class=\"dv\">10</span></a>\n<a class=\"sourceLine\" id=\"cb19-8\" title=\"8\"><span class=\"dt\">BankAccount</span> { accountType <span class=\"fu\">=</span> <span class=\"dt\">Savings</span></a>\n<a class=\"sourceLine\" id=\"cb19-9\" title=\"9\">            , transactions <span class=\"fu\">=</span> [<span class=\"dt\">Deposit</span> {amount <span class=\"fu\">=</span> <span class=\"dv\">100</span>},<span class=\"dt\">Withdrawal</span> {amount <span class=\"fu\">=</span> <span class=\"dv\">60</span>}]}</a></code></pre></div>\n<p>Note that if we have lenses over our <code>BankAccount</code> we can save a bit of work and define the same traversal by <em>composing</em> a lens with our traversal to build the new traversal, assuming <code>transactions :: Lens' BankAccount [Transaction]</code> we get:</p>\n<div class=\"sourceCode\" id=\"cb20\"><pre class=\"sourceCode haskell\"><code class=\"sourceCode haskell\"><a class=\"sourceLine\" id=\"cb20-1\" title=\"1\"><span class=\"ot\">accountWithdrawals ::</span> <span class=\"dt\">Traversal&#39;</span> <span class=\"dt\">BankAccount</span> <span class=\"dt\">Int</span></a>\n<a class=\"sourceLine\" id=\"cb20-2\" title=\"2\">accountWithdrawals <span class=\"fu\">=</span> transactions <span class=\"fu\">.</span> withdrawals</a></code></pre></div>\n<p>That'll do it! Most complex traversals can be built using a combination of these techniques!</p>","title":"Writing Traversals","why":"Traversals can access or alter zero or more elements from throughout a data structure","section":"Traversals"}]